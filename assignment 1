import socket
import re

def perform_calculation(expression):
    # Define regular expression patterns for detecting different operations
    patterns = {
        'add': r'(\d+)\s*\+\s*(\d+)',        # Matches "2 + 3"
        'subtract': r'(\d+)\s*-\s*(\d+)',   # Matches "5 - 3"
        'multiply': r'(\d+)\s*\*\s*(\d+)',   # Matches "3 * 4"
        'divide': r'(\d+)\s*/\s*(\d+)',      # Matches "8 / 2"
    }

    # Check each pattern
    for operation, pattern in patterns.items():
        match = re.match(pattern, expression)
        if match:
            num1, num2 = int(match.group(1)), int(match.group(2))
            if operation == 'add':
                return num1 + num2
            elif operation == 'subtract':
                return num1 - num2
            elif operation == 'multiply':
                return num1 * num2
            elif operation == 'divide':
                if num2 != 0:
                    return num1 // num2  # Integer division
                else:
                    return "Error: Division by zero"
    return "Error: Invalid Expression"

def start_server():
    host = '127.0.0.1'  # Localhost
    port = 8080          # Port number for the server
    
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)  # Maximum number of queued connections

    print(f"Server listening on {host}:{port}...")
    
    while True:
        client_socket, client_address = server_socket.accept()
        print(f"Connection established with {client_address}")

        try:
            # Receive the message from the client
            message = client_socket.recv(1024).decode('utf-8')
            print(f"Received from client: {message}")

            # Process the message and calculate the result
            result = perform_calculation(message)
            print(f"Calculated result: {result}")

            # Send the result back to the client
            client_socket.send(str(result).encode('utf-8'))
        except Exception as e:
            print(f"Error: {e}")
        finally:
            client_socket.close()

if __name__ == "__main__":
    start_server()







